#!/bin/sh
usage="pidswallow (pid swallow WM/DE independent)
Hides terminal window automatically, so that you don't have to

pidswallow [OPTION ...]

OPTIONS:
        -h  --help              Show this message
        -s  --swallow <CWID>    Hides parent window of the given child window id.
        -v  --vomit <CWID>      Unhides parent window of the given child window id.
        -t  --toggle <CWID>     toggle between swallow and vomit. (default)
        -g  --glue              treat if parent and child window are same. (recommended)
        -l  --loop              listen and hide / unhide window on launch / remove.
        -V  --verbose           Shows useful information.

bugs/issues: https://github.com/liupold/pidswallow.
"
swallowable=" ${PIDSWALLOW_SWALLOWABLE:-"$TERMINAL xterm konsole xfce4-terminal"} "
blacklist=" ${PIDSWALLOW_BLACKLIST:-"$swallowable"} "
glue_blacklist=" $PIDSWALLOW_GLUE_BLACKLIST "
swallow_command="${PIDSWALLOW_SWALLOW_COMMAND:-xdotool windowunmap --sync {%pwid\}}"
vomit_command="${PIDSWALLOW_VOMIT_COMMAND:-xdotool windowmap --sync {%pwid\}}"
preglue_hook="$PIDSWALLOW_PREGLUE_HOOK"

verbose=0
glue=0

vomit() {
        unset cwid pwid # similar to local
        cwid=$(printf "%d\n" "$1") # decimal conversion
        [ -f "/tmp/swallowed-by-$cwid" ] || return 1
        pwid=$(cat "/tmp/swallowed-by-$cwid")
        [ "$verbose" -eq 1 ] && echo "vomit - $cwid vomiting $pwid using $vomit_command"
        echo "$vomit_command" | \
                sed -e "s|{%pwid}|$pwid|g" -e "s|{%cwid}|$cwid|g" | /bin/sh


        [ "$verbose" -eq 1 ] && echo "vomit - $cwid vomited $pwid"
        rm "/tmp/swallowed-by-$cwid"
        if [ "$glue" -eq  1 ] && [ "${glue_blacklist#* $cname}" = "$glue_blacklist" ]; then
                desk=$(cat /tmp/swallowed-by-"$cwid"-desk 2>/dev/null)
                [ -n "$desk" ] && \
                        [ "$(xdotool get_desktop_for_window "$pwid")" -ne "$desk" ] && \
                        xdotool set_desktop_for_window "$pwid" "$desk"

                cpos=$(cat /tmp/swallowed-by-"$cwid"-pos 2>/dev/null)
                [ -n "$cpos" ] && \
                        xdotool windowmove "$pwid" "${cpos%% *}" "${cpos##* }"

                csize=$(cat /tmp/swallowed-by-"$cwid"-size 2>/dev/null)
                [ -n "$csize" ] && \
                        xdotool windowsize "$pwid" "${csize%% *}" "${csize##* }"
        fi
        rm -f "/tmp/swallowed-by-$cwid-pos" "/tmp/swallowed-by-$cwid-size" \
                "/tmp/swallowed-by-$cwid-desk"

        xprop -id "$cwid" >/dev/null 2>&1 && xdotool windowactivate "$cwid"

}

swallow() {
        # return values
        # 0 -> Found and swallowed
        # 1 -> No swallowable window found.
        # 3 -> window lacks a _NET_WM_PID property.
        # 4 -> window already swallowed
        # 5 -> swallow_command failed
        unset cwid pwid cname pname ppid cpid # similar to local.
        cwid=$(printf "%d\n" "$1") # decimal conversion
        [ -f "/tmp/swallowed-by-$cwid" ] && return 4
        cpid="$(xdotool getwindowpid "$cwid" 2>/dev/null)" || return 3
        cname="$(ps -p "$cpid" -o comm=)"
        [ "${blacklist#* $cname }" != "$blacklist" ] && return 0
        process_tree="$(pstree -ATlsp "$cpid" \
                | sed -n -e 's|(|:|g' -e 's|)||g' \
                -e 's|---|\n|g' -e 's|-+-|\n|g' -e 's/\n'"$cname"':'"$cpid"'.*//' -e '1p' | tac)"
        [ "$verbose" -eq 1 ] && \
        echo "swallow - Scanning process tree of $cname($cpid): $process_tree" | \
        paste -s -d ' ' # put it all together in a single verbose line
        for parent in $process_tree; do
                pname="${parent%%:*}" # ancestor name
                [ "${swallowable#* $pname }" != "$swallowable" ] \
                        && ppid="${parent##*:}" && break
        done
        [ -z "$ppid" ] && return 1 # nothing swallowable.
        [ "$verbose" -eq 1 ] && echo "swallow - $pname($ppid) detected as swallowable"
        pwid="$(xdotool search --limit 1 --onlyvisible --pid "$ppid")"
        [ -z "$pwid" ] && return 4
        [ "$verbose" -eq 1 ] && echo "swallow - $cwid swallowing $pwid using $swallow_command"
        echo "$swallow_command" | \
                sed -e "s|{%pwid}|$pwid|g" -e "s|{%cwid}|$cwid|g" | /bin/sh || \
                return 5
        echo "$pwid" > "/tmp/swallowed-by-$cwid"
        [ "$verbose" -eq 1 ] && echo "swallow - $cname($cwid) swallowed $pname($pwid)"
        [ "$glue" -eq  0 ] || [ "${glue_blacklist#* $cname}" != "$glue_blacklist" ] && return 0
        echo "$preglue_hook" | \
                sed -e "s|{%pwid}|$pwid|g" -e "s|{%cwid}|$cwid|g" | /bin/sh
        ppos=$(xdotool getwindowgeometry "$pwid" | \
                grep -o '[0-9]\+,[0-9]\+' | tr ',' ' ')
        psize=$(xdotool getwindowgeometry "$pwid" | \
                grep -o '[0-9]\+x[0-9]\+' | tr 'x' ' ')
        xdotool windowsize "$cwid" "${psize%% *}" "${psize##* }"
        xdotool windowmove "$cwid" "${ppos%% *}" "${ppos##* }"
        { xprop -spy -id "$cwid" | while read -r _; do
                cgeo="$(xdotool getwindowgeometry "$cwid")"

                cpos=$(echo "$cgeo" | \
                        grep -o '[0-9]\+,[0-9]\+' | tr ',' ' ')
                csize=$(echo "$cgeo" | \
                        grep -o '[0-9]\+x[0-9]\+' | tr 'x' ' ')
                desk="$(xdotool get_desktop_for_window "$cwid")"

                [ -n "$csize" ] && echo "$cpos" > "/tmp/swallowed-by-$cwid-pos"
                [ -n "$cpos" ] && echo "$csize" > "/tmp/swallowed-by-$cwid-size"
                [ -n "$desk" ] && echo "$desk" > "/tmp/swallowed-by-$cwid-desk"
        done } 2>/dev/null &
}

toggle() {
        cwid="$1"
        [ "$glue" -eq 1 ] && 'toggle is not supported/needed with --glue' && exit 1
        if [ -f "/tmp/swallowed-by-$cwid" ]; then
                vomit "$cwid"
                return "$?"
        else
                swallow "$cwid"
                return "$?"
        fi
}

loop() {
        prev_event="$(xprop -root  _NET_CLIENT_LIST)"
        xprop -spy -root  _NET_CLIENT_LIST | while read -r event; do
                unset node_added node_removed
                for wid in $(echo "${event##*# }" | tr -d ','); do
                        [ "${prev_event#*$wid}" = "$prev_event" ] \
                                && node_added="$wid" && break
                done
                for wid in $(echo "${prev_event##*# }" | tr -d ','); do
                        [ "${event#*$wid}" = "$event" ] \
                                && node_removed="$wid" && break
                done
                prev_event="$event"
                # [ -z "${node_added}${node_removed}" ] && continue
                [ -n "$node_added" ] && swallow "$node_added"
                [ -n "$node_removed" ] && vomit "$node_removed"
        done
        return 1
}

[ -p /dev/stdin ] && eval set -- "$* $(cat /dev/stdin)" # basic pipe support
[ "$#" -eq 0 ] && echo "$usage" && exit 1

TEMP=$(getopt -o 'Vghlt:s:v:' --long 'verbose,glue,help,loop,toggle:,swallow:,vomit:' \
        -n 'pidswallow' -- "$@")

# precheck
eval set -- "${TEMP}"
while true; do
        case "$1" in
                '-V'|'--verbose')
                        verbose=1
                        [ "$verbose" -eq 1 ] && echo "SWALLOWABLE: \"$swallowable\""
                        shift; continue;;
                '-g'|'--glue')
                        glue=1
                        shift; continue;;
                '--')
                        shift; break;;
                *)
                        shift; continue;;
        esac
done

eval set -- "${TEMP}"; unset TEMP
while true; do
        case "$1" in
                '-V'|'--verbose')
                        shift; continue;;
                '-g'|'--glue')
                        shift; continue;;
                '-h' | '--help' )
                        echo "$usage" && exit 0;;
                '-t'|'--toggle')
                        toggle "$2" || exit "$?"
                        shift 2; continue;;
                '-s'|'--swallow')
                        swallow "$2" || exit "$?"
                        shift 2; continue;;
                '-v'|'--vomit')
                        vomit "$2" || exit "$?"
                        shift 2; continue;;
                '-l'|'--loop')
                        loop || exit "$?"
                        shift; continue;;
                '--')
                        shift; break;;
                *)
                        echo "Internal error!" >&2
                        echo "$usage" && exit 1;;
        esac
done
# toggle WID on first non-flag argument
[ -n "$*" ] && toggle "$1" && shift
# error if there's more than one non-flag argument
if [ -n "$*" ]; then
        echo "Unrecognized trailing option '$*'" >&2; exit 1
fi
